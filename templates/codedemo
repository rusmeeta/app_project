# ------------------ LOGIN ------------------
@auth_bp.route('/login', methods=['GET', 'POST'])
def login_page():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        conn = get_db_connection()
        if not conn:
            flash("Database connection failed.", "error")
            return render_template('login.html')

        cur = conn.cursor()
        cur.execute("SELECT id, fullname, user_type, password_hash FROM users WHERE email = %s", (email,))
        user = cur.fetchone()
        cur.close()
        conn.close()

        if user:
            user_id, fullname, user_type, db_password = user

            # if check_password_hash(db_password, password):  # Production
            if password == db_password:  # Dev only
                session['user_id'] = user_id
                session['fullname'] = fullname
                session['email'] = email
                session['user_type'] = user_type

                # Redirect based on role
                if user_type == 'farmer':
                    return redirect(url_for('farmer.dashboard'))
                elif user_type == 'consumer':
                    return redirect(url_for('recommendation.new_customer_recommendation'))  # Or your consumer dashboard
                elif user_type == 'admin':
                    return redirect(url_for('admin.dashboard'))  # Admin dashboard

                return redirect(url_for('home'))  # Fallback

            else:
                flash('Incorrect password.', 'error')
        else:
            flash('Email not found.', 'error')

    return render_template('login.html')





from flask import Blueprint, render_template, session
import psycopg2

recommendation_bp = Blueprint('recommendation', __name__, url_prefix='/recommendation')

# PostgreSQL connection
conn = psycopg2.connect(
    dbname="kisanlink_db",
    user="kisanlink_user",
    password="password123",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

# Old customer (personalized)
@recommendation_bp.route('/old_customer')
def old_customer_recommendation():
    if 'user_id' not in session:
        return "Please login first"
    user_id = session['user_id']
    cur.execute("SELECT product_name, description FROM recommendations WHERE user_id=%s", (user_id,))
    recommendations = cur.fetchall()
    return render_template('old_customer.html', recommendations=recommendations)

# New customer (general)
@recommendation_bp.route('/new_customer')
def new_customer_recommendation():
    cur.execute("SELECT product_name, description FROM recommendations LIMIT 10")
    products = cur.fetchall()
    return render_template('new_customer.html', products=products)
